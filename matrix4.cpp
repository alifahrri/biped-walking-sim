#include "matrix4.h"
#include <iostream>

#define AT(i,j) 4*i+j
#define M(row,column,mat) mat[AT(row,column)]
#define SWAP(m1,m2,temp) temp=m1; m1=m2; m2=temp;

Matrix4::Matrix4()
{
    identity();
}

Matrix4::Matrix4(double *mat){
    for(int i=0; i<16; i++)
        m[i]=mat[i];
}

void Matrix4::identity(){
    m[0] =1; m[1] =0; m[2] =0; m[3] =0;
    m[4] =0; m[5] =1; m[6] =0; m[7] =0;
    m[8] =0; m[9] =0; m[10]=1; m[11]=0;
    m[12]=0; m[13]=0; m[14]=0; m[15]=1;
}

double Matrix4::at(int i, int j){
    return m[AT(i,j)];
}

void Matrix4::set(int i, int j, double val){
    m[AT(i,j)]=val;
}

void Matrix4::transpose(){
    double temp;
    SWAP(m[4],m[1],temp);
    SWAP(m[8],m[2],temp);
    SWAP(m[12],m[3],temp);
    SWAP(m[9],m[6],temp);
    SWAP(m[13],m[7],temp);
    SWAP(m[14],m[11],temp);
}

double Matrix4::determinant(){
    double det;
    det =   M(0,0,m)*M(1,1,m)*M(2,2,m)*M(3,3,m) + M(0,0,m)*M(1,2,m)*M(2,3,m)*M(3,1,m) + M(0,0,m)*M(1,3,m)*M(2,1,m)*M(3,2,m) +
            M(0,1,m)*M(1,0,m)*M(2,3,m)*M(3,2,m) + M(0,1,m)*M(1,2,m)*M(2,0,m)*M(3,3,m) + M(0,1,m)*M(1,3,m)*M(2,2,m)*M(3,0,m) +
            M(0,2,m)*M(1,0,m)*M(2,1,m)*M(3,3,m) + M(0,2,m)*M(1,1,m)*M(2,3,m)*M(3,0,m) + M(0,2,m)*M(1,3,m)*M(2,0,m)*M(3,1,m) +
            M(0,3,m)*M(1,0,m)*M(2,2,m)*M(3,1,m) + M(0,3,m)*M(1,1,m)*M(2,0,m)*M(3,2,m) + M(0,3,m)*M(1,2,m)*M(2,1,m)*M(3,0,m) -
            M(0,0,m)*M(1,1,m)*M(2,3,m)*M(3,2,m) - M(0,0,m)*M(1,2,m)*M(2,1,m)*M(3,3,m) - M(0,0,m)*M(1,3,m)*M(2,2,m)*M(3,1,m) -
            M(0,1,m)*M(1,0,m)*M(2,2,m)*M(3,3,m) - M(0,1,m)*M(1,2,m)*M(2,3,m)*M(3,0,m) - M(0,1,m)*M(1,3,m)*M(2,0,m)*M(3,2,m) -
            M(0,2,m)*M(1,0,m)*M(2,3,m)*M(3,1,m) - M(0,2,m)*M(1,1,m)*M(2,0,m)*M(3,3,m) - M(0,2,m)*M(1,3,m)*M(2,1,m)*M(3,0,m) -
            M(0,3,m)*M(1,0,m)*M(2,1,m)*M(3,2,m) - M(0,3,m)*M(1,1,m)*M(2,2,m)*M(3,0,m) - M(0,3,m)*M(1,2,m)*M(2,0,m)*M(3,1,m);
    return det;
}

Matrix4 Matrix4::inverse(){
    double b[16];
    double det = determinant();
    M(0,0,b) = M(1,1,m)*M(2,2,m)*M(3,3,m) + M(1,2,m)*M(2,3,m)*M(3,1,m) + M(1,3,m)*M(2,1,m)*M(3,2,m) - M(1,1,m)*M(2,3,m)*M(3,2,m) - M(1,2,m)*M(2,1,m)*M(3,3,m) - M(1,3,m)*M(2,2,m)*M(3,1,m);
    M(0,1,b) = M(0,1,m)*M(2,3,m)*M(3,2,m) + M(0,2,m)*M(2,1,m)*M(3,3,m) + M(0,3,m)*M(2,2,m)*M(3,1,m) - M(0,1,m)*M(2,2,m)*M(3,3,m) - M(0,2,m)*M(2,3,m)*M(3,1,m) - M(0,3,m)*M(2,1,m)*M(3,2,m);
    M(0,2,b) = M(0,1,m)*M(1,2,m)*M(3,3,m) + M(0,2,m)*M(1,3,m)*M(3,1,m) + M(0,3,m)*M(1,1,m)*M(3,2,m) - M(0,1,m)*M(1,3,m)*M(3,2,m) - M(0,2,m)*M(1,1,m)*M(3,3,m) - M(0,3,m)*M(1,2,m)*M(3,1,m);
    M(0,3,b) = M(0,1,m)*M(1,3,m)*M(2,2,m) + M(0,2,m)*M(1,1,m)*M(2,3,m) + M(0,3,m)*M(1,2,m)*M(2,1,m) - M(0,1,m)*M(1,2,m)*M(2,3,m) - M(0,2,m)*M(1,3,m)*M(2,1,m) - M(0,3,m)*M(1,1,m)*M(2,2,m);
    M(1,0,b) = M(1,0,m)*M(2,3,m)*M(3,2,m) + M(1,2,m)*M(2,0,m)*M(3,3,m) + M(1,3,m)*M(2,2,m)*M(3,0,m) - M(1,0,m)*M(2,2,m)*M(3,3,m) - M(1,2,m)*M(2,3,m)*M(3,0,m) - M(1,3,m)*M(2,0,m)*M(3,2,m);
    M(1,1,b) = M(0,0,m)*M(2,2,m)*M(3,3,m) + M(0,2,m)*M(2,3,m)*M(3,0,m) + M(0,3,m)*M(2,0,m)*M(3,2,m) - M(0,0,m)*M(2,3,m)*M(3,2,m) - M(0,2,m)*M(2,0,m)*M(3,3,m) - M(0,3,m)*M(2,2,m)*M(3,0,m);
    M(1,2,b) = M(0,0,m)*M(1,3,m)*M(3,2,m) + M(0,2,m)*M(1,0,m)*M(3,3,m) + M(0,3,m)*M(1,2,m)*M(3,0,m) - M(0,0,m)*M(1,2,m)*M(3,3,m) - M(0,2,m)*M(1,3,m)*M(3,0,m) - M(0,3,m)*M(1,0,m)*M(3,2,m);
    M(1,3,b) = M(0,0,m)*M(1,2,m)*M(2,3,m) + M(0,2,m)*M(1,3,m)*M(2,0,m) + M(0,3,m)*M(1,0,m)*M(2,2,m) - M(0,0,m)*M(1,3,m)*M(2,2,m) - M(0,2,m)*M(1,0,m)*M(2,3,m) - M(0,3,m)*M(1,2,m)*M(2,0,m);
    M(2,0,b) = M(1,0,m)*M(2,1,m)*M(3,3,m) + M(1,1,m)*M(2,3,m)*M(3,0,m) + M(1,3,m)*M(2,0,m)*M(3,1,m) - M(1,0,m)*M(2,3,m)*M(3,1,m) - M(1,1,m)*M(2,0,m)*M(3,3,m) - M(1,3,m)*M(2,1,m)*M(3,0,m);
    M(2,1,b) = M(0,0,m)*M(2,3,m)*M(3,1,m) + M(0,1,m)*M(2,0,m)*M(3,3,m) + M(0,3,m)*M(2,1,m)*M(3,0,m) - M(0,0,m)*M(2,1,m)*M(3,3,m) - M(0,1,m)*M(2,3,m)*M(3,0,m) - M(0,3,m)*M(2,0,m)*M(3,1,m);
    M(2,2,b) = M(0,0,m)*M(1,1,m)*M(3,3,m) + M(0,1,m)*M(1,3,m)*M(3,0,m) + M(0,3,m)*M(1,0,m)*M(3,1,m) - M(0,0,m)*M(1,3,m)*M(3,1,m) - M(0,1,m)*M(1,0,m)*M(3,3,m) - M(0,3,m)*M(1,1,m)*M(3,0,m);
    M(2,3,b) = M(0,0,m)*M(1,3,m)*M(2,1,m) + M(0,1,m)*M(1,0,m)*M(2,3,m) + M(0,3,m)*M(1,1,m)*M(2,0,m) - M(0,0,m)*M(1,1,m)*M(2,3,m) - M(0,1,m)*M(1,3,m)*M(2,0,m) - M(0,3,m)*M(1,0,m)*M(2,1,m);
    M(3,0,b) = M(1,0,m)*M(2,2,m)*M(3,1,m) + M(1,1,m)*M(2,0,m)*M(3,2,m) + M(1,2,m)*M(2,1,m)*M(3,0,m) - M(1,0,m)*M(2,1,m)*M(3,2,m) - M(1,1,m)*M(2,2,m)*M(3,0,m) - M(1,2,m)*M(2,0,m)*M(3,1,m);
    M(3,1,b) = M(0,0,m)*M(2,1,m)*M(3,2,m) + M(0,1,m)*M(2,2,m)*M(3,0,m) + M(0,2,m)*M(2,0,m)*M(3,1,m) - M(0,0,m)*M(2,2,m)*M(3,1,m) - M(0,1,m)*M(2,0,m)*M(3,2,m) - M(0,2,m)*M(2,1,m)*M(3,0,m);
    M(3,2,b) = M(0,0,m)*M(1,2,m)*M(3,1,m) + M(0,1,m)*M(1,0,m)*M(3,2,m) + M(0,2,m)*M(1,1,m)*M(3,0,m) - M(0,0,m)*M(1,1,m)*M(3,2,m) - M(0,1,m)*M(1,2,m)*M(3,0,m) - M(0,2,m)*M(1,0,m)*M(3,1,m);
    M(3,3,b) = M(0,0,m)*M(1,1,m)*M(2,2,m) + M(0,1,m)*M(1,2,m)*M(2,0,m) + M(0,2,m)*M(1,0,m)*M(2,1,m) - M(0,0,m)*M(1,2,m)*M(2,1,m) - M(0,1,m)*M(1,0,m)*M(2,2,m) - M(0,2,m)*M(1,1,m)*M(2,0,m);
    for(int i=0; i<16; i++){
        b[i]=b[i]/det;
    }
    Matrix4 ret(b);
    return ret;
}

Matrix4 Matrix4::operator *(Matrix4 Mat){
    double b[16];
    //********************************************************************************************//
    M(0,0,b)=M(0,0,m)*M(0,0,Mat.m)+M(0,1,m)*M(1,0,Mat.m)+M(0,2,m)*M(2,0,Mat.m)+M(0,3,m)*M(3,0,Mat.m);
    M(1,0,b)=M(1,0,m)*M(0,0,Mat.m)+M(1,1,m)*M(1,0,Mat.m)+M(1,2,m)*M(2,0,Mat.m)+M(1,3,m)*M(3,0,Mat.m);
    M(2,0,b)=M(2,0,m)*M(0,0,Mat.m)+M(2,1,m)*M(1,0,Mat.m)+M(2,2,m)*M(2,0,Mat.m)+M(2,3,m)*M(3,0,Mat.m);
    M(3,0,b)=M(3,0,m)*M(0,0,Mat.m)+M(3,1,m)*M(1,0,Mat.m)+M(3,2,m)*M(2,0,Mat.m)+M(3,3,m)*M(3,0,Mat.m);
    //********************************************************************************************//
    M(0,1,b)=M(0,0,m)*M(0,1,Mat.m)+M(0,1,m)*M(1,1,Mat.m)+M(0,2,m)*M(2,1,Mat.m)+M(0,3,m)*M(3,1,Mat.m);
    M(1,1,b)=M(1,0,m)*M(0,1,Mat.m)+M(1,1,m)*M(1,1,Mat.m)+M(1,2,m)*M(2,1,Mat.m)+M(1,3,m)*M(3,1,Mat.m);
    M(2,1,b)=M(2,0,m)*M(0,1,Mat.m)+M(2,1,m)*M(1,1,Mat.m)+M(2,2,m)*M(2,1,Mat.m)+M(2,3,m)*M(3,1,Mat.m);
    M(3,1,b)=M(3,0,m)*M(0,1,Mat.m)+M(3,1,m)*M(1,1,Mat.m)+M(3,2,m)*M(2,1,Mat.m)+M(3,3,m)*M(3,1,Mat.m);
    //********************************************************************************************//
    M(0,2,b)=M(0,0,m)*M(0,2,Mat.m)+M(0,1,m)*M(1,2,Mat.m)+M(0,2,m)*M(2,2,Mat.m)+M(0,3,m)*M(3,2,Mat.m);
    M(1,2,b)=M(1,0,m)*M(0,2,Mat.m)+M(1,1,m)*M(1,2,Mat.m)+M(1,2,m)*M(2,2,Mat.m)+M(1,3,m)*M(3,2,Mat.m);
    M(2,2,b)=M(2,0,m)*M(0,2,Mat.m)+M(2,1,m)*M(1,2,Mat.m)+M(2,2,m)*M(2,2,Mat.m)+M(2,3,m)*M(3,2,Mat.m);
    M(3,2,b)=M(3,0,m)*M(0,2,Mat.m)+M(3,1,m)*M(1,2,Mat.m)+M(3,2,m)*M(2,2,Mat.m)+M(3,3,m)*M(3,2,Mat.m);
    //********************************************************************************************//
    M(0,3,b)=M(0,0,m)*M(0,3,Mat.m)+M(0,1,m)*M(1,3,Mat.m)+M(0,2,m)*M(2,3,Mat.m)+M(0,3,m)*M(3,3,Mat.m);
    M(1,3,b)=M(1,0,m)*M(0,3,Mat.m)+M(1,1,m)*M(1,3,Mat.m)+M(1,2,m)*M(2,3,Mat.m)+M(1,3,m)*M(3,3,Mat.m);
    M(2,3,b)=M(2,0,m)*M(0,3,Mat.m)+M(2,1,m)*M(1,3,Mat.m)+M(2,2,m)*M(2,3,Mat.m)+M(2,3,m)*M(3,3,Mat.m);
    M(3,3,b)=M(3,0,m)*M(0,3,Mat.m)+M(3,1,m)*M(1,3,Mat.m)+M(3,2,m)*M(2,3,Mat.m)+M(3,3,m)*M(3,3,Mat.m);
    //********************************************************************************************//
    Matrix4 ret(b);
    return ret;
}

void Matrix4::print(){
    for(int i=0; i<16; i++){
        if(i%4==0)
            std::cout<<std::endl;
        std::cout<<m[i]<<"\t";
    }
    std::cout<<std::endl;
}
